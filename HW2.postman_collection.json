{
	"info": {
		"_postman_id": "52d792c9-2b8c-45b6-a8e4-26c32d21071c",
		"name": "HW2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "19799278"
	},
	"item": [
		{
			"name": "/first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"correct string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "/user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var resPytka = pm.response.json();\r",
							"\r",
							"\r",
							"pm.test(\"test_name\", function (){\r",
							"    var resPytka = pm.response.json();\r",
							"    pm.expect (resPytka.name).to.eql(\"olia\");\r",
							"});\r",
							"\r",
							"pm. test(\"test_age\", function (){\r",
							"    pm.expect (resPytka.age).to.eql(\"32\")\r",
							"})\r",
							"\r",
							"pm. test(\"test_salary\", function (){\r",
							"    pm.expect (resPytka.salary).to.eql(400)\r",
							"})\r",
							"\r",
							"var requsPop = request.data;\r",
							"\r",
							"let req_name = requsPop.name;\r",
							"pm.test(\"test_name1\", function (){\r",
							"    var resPytka = pm.response.json();\r",
							"    pm.expect (resPytka.name).to.eql(req_name);\r",
							"});\r",
							"\r",
							"let req_age = requsPop.age;\r",
							"pm. test(\"test_age1\", function (){\r",
							"    pm.expect (resPytka.age).to.eql(req_age)\r",
							"})\r",
							"\r",
							"let req_salary =  +requsPop.salary;\r",
							"pm. test(\"test_salary1\", function (){\r",
							"    pm.expect (resPytka.salary).to.eql(req_salary)\r",
							"})\r",
							"\r",
							"console.log(resPytka.family)\r",
							"\r",
							"// let req_u_salary_1_5_year = +requsPop.salary*4\r",
							"\r",
							"pm. test(\"test_u_salary_1_5_year\", function (){\r",
							"    pm.expect (resPytka.family.u_salary_1_5_year).to.eql(req_salary * 4)\r",
							"})\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "olia",
							"type": "text"
						},
						{
							"key": "age",
							"value": "32",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "400",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": [{
				"age": "32",
				"family": {
					"children": [
						[
							"Alex",
							24
						],
						[
							"Kate",
							12
						]
					],
					"u_salary_1_5_year": 1600
				},
				"name": "olia",
				"salary": 400
			}]
		},
		{
			"name": "/object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//http://162.55.220.72:5005/object_info_3\r",
							"//1. Отправить запрос.\r",
							"//2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//3. Спарсить response body в json.\r",
							"var resPytka = pm.response.json();\r",
							"\r",
							"//4. Спарсить request.\r",
							"var reqPop = pm.request.url.query.toObject();\r",
							"\r",
							"//5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"let req_name = reqPop.name\r",
							"pm.test(\"test_name\", function (){\r",
							"    pm.expect (resPytka.name).to.eql(req_name);\r",
							"});\r",
							"\r",
							"//6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"let req_age = reqPop.age;\r",
							"pm.test(\"test_age\", function (){\r",
							"    pm.expect (resPytka.age).to.eql(req_age);\r",
							"});\r",
							"\r",
							"//7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"let req_salary = +reqPop.salary;\r",
							"pm.test(\"test_salary\", function (){\r",
							"    pm.expect (resPytka.salary).to.eql(req_salary);\r",
							"});\r",
							"\r",
							"//8. Вывести в консоль параметр family из response.\r",
							"console.log(resPytka.family)\r",
							"\r",
							"//9. Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"test_dog_name\", function (){\r",
							"    pm.expect (resPytka.family.pets.dog).to.have.property(\"name\");\r",
							"});\r",
							"\r",
							"pm.test(\"test_dog_a\", function (){\r",
							"    pm.expect (resPytka.family.pets.dog).to.have.property(\"age\");\r",
							"});\r",
							"//10. Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"test_dog_Luky\", function (){\r",
							"    pm.expect (resPytka.family.pets.dog.name).to.eql(\"Luky\");\r",
							"});\r",
							"\r",
							"//11. Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"test_dog_age\", function (){\r",
							"    pm.expect (resPytka.family.pets.dog.age).to.eql(4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=olia&age=32&salary=500",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "olia"
						},
						{
							"key": "age",
							"value": "32"
						},
						{
							"key": "salary",
							"value": "500"
						}
					]
				}
			},
			"response": [{
				"age": "32",
				"family": {
					"children": [
						[
							"Alex",
							24
						],
						[
							"Kate",
							12
						]
					],
					"pets": {
						"cat": {
							"age": 3,
							"name": "Sunny"
						},
						"dog": {
							"age": 4,
							"name": "Luky"
						}
					},
					"u_salary_1_5_year": 2000
				},
				"name": "olia",
				"salary": 500
			}]
		},
		{
			"name": "/object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// pm.test(\"Status code is 200\", function () {\r",
							"// pm.environment.set(\"variable_key\", \"variable_value\");\r",
							"//     pm.response.to.have.status(200);\r",
							"// });\r",
							"\r",
							"var resChoto = pm.response.json();\r",
							"var reqChot = pm.request.url.query.toObject();\r",
							"// let req_name = reqChot.name\r",
							"\r",
							"// pm.test(\"test_name\", function (){\r",
							"//     pm.expect (resChoto.name).to.eql(req_name);\r",
							"// });\r",
							"\r",
							"// let req_age = + reqChot.age\r",
							"\r",
							"// pm.test(\"test_age\", function (){\r",
							"//     pm.expect (resChoto.age).to.eql(req_age);\r",
							"// });\r",
							"\r",
							"// console.log(reqChot.salary)\r",
							"// console.log(resChoto.salary)\r",
							"// console.log(resChoto.salary[0])\r",
							"// console.log(resChoto.salary[1])\r",
							"// console.log(resChoto.salary[2])\r",
							"\r",
							"// let req_salary = +reqChot.salary\r",
							"// pm.test(\"test_salary\", function (){\r",
							"//     pm.expect (resChoto.salary[0]).to.eql(req_salary);\r",
							"// });\r",
							" \r",
							"// pm.test(\"test_salary *2\", function (){\r",
							"//     pm.expect (resChoto.salary[1]).to.eql.toString(req_salary * 2);\r",
							"// });\r",
							"\r",
							"// pm.test(\"test_salary *3\", function (){\r",
							"//     pm.expect (resChoto.salary[2]).to.eql.toString(req_salary * 3);\r",
							"// });\r",
							"\r",
							"// let name = resChoto.name;\r",
							"// let age = resChoto.age;\r",
							"// let salary = resChoto.salary[0];\r",
							"\r",
							"// pm.environment.set(\"name\", name);\r",
							"// pm.environment.set(\"age\", age);\r",
							"// pm.environment.set(\"salary\", salary);\r",
							"\r",
							"for(let key in resChoto.salary){\r",
							"    console.log(resChoto.salary[key])\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=olia&age=32&salary=500",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "olia"
						},
						{
							"key": "age",
							"value": "32"
						},
						{
							"key": "salary",
							"value": "500"
						}
					]
				}
			},
			"response": [{
				"age": 32,
				"name": "olia",
				"salary": [
					500,
					"1000",
					"1500"
				]
			}]
		},
		{
			"name": "/user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//http://162.55.220.72:5005/user_info_2\r",
							"//1. Отправить запрос.\r",
							"//2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//3. Спарсить response body в json.\r",
							"var respFin = pm.response.json();\r",
							" \r",
							" //4.Спарсить request.\r",
							"var reqFinish = request.data;\r",
							"\r",
							"//5.Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"test_1\", function () {\r",
							"    pm.expect(respFin).to.have.property(\"start_qa_salary\");\r",
							"});\r",
							"\r",
							"//6.Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"test_2\", function () {\r",
							"pm.expect(respFin).to.have.property(\"qa_salary_after_6_months\");\r",
							"});\r",
							"\r",
							"//7.Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"test_3\", function () {\r",
							"pm.expect(respFin).to.have.property(\"qa_salary_after_12_months\");\r",
							"});\r",
							"\r",
							"//8.. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"test_4\", function () {\r",
							"pm.expect(respFin).to.have.property(\"qa_salary_after_1.5_year\");\r",
							"});\r",
							"\r",
							"//9.Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"test_5\", function () {\r",
							"pm.expect(respFin).to.have.property(\"qa_salary_after_3.5_years\");\r",
							"});\r",
							"\r",
							"//10.Проверить, что json response имеет параметр person\r",
							"pm.test(\"test_6\", function () {\r",
							"pm.expect(respFin).to.have.property(\"person\");\r",
							"});\r",
							"\r",
							"//11.Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"let req_salary = +reqFinish.salary\r",
							"pm.test(\"test_7\", function () {\r",
							"pm.expect(respFin.start_qa_salary).to.eql(req_salary);\r",
							"});\r",
							"\r",
							"//12.. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"test_8\", function () {\r",
							"pm.expect(respFin.qa_salary_after_6_months).to.eql(req_salary*2);\r",
							"});\r",
							"\r",
							"//13.Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"test_9\", function () {\r",
							"pm.expect(respFin.qa_salary_after_12_months).to.eql(req_salary*2.7);\r",
							"});\r",
							"\r",
							"//14.Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test(\"test_10\", function () {\r",
							"pm.expect(respFin[\"qa_salary_after_1.5_year\"]).to.eql(req_salary*3.3);\r",
							"});\r",
							"\r",
							"//15.Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"test_11\", function () {\r",
							"pm.expect(respFin[\"qa_salary_after_3.5_years\"]).to.eql(req_salary*3.8);\r",
							"});\r",
							"\r",
							"//16.Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"test_12\", function () {\r",
							"pm.expect(respFin.person.u_name[1]).to.eql(req_salary);\r",
							"});\r",
							"\r",
							"//17.Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"let req_age = + reqFinish.age;\r",
							"pm.test(\"test_13\", function () {\r",
							"pm.expect(respFin.person.u_age).to.eql(req_age);\r",
							"});\r",
							"\r",
							"//18.Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"test_14\", function () {\r",
							"pm.expect(respFin.person.u_salary_5_years).to.eql(req_salary*4.2);\r",
							"});\r",
							"\r",
							"//***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"// мы там  не договорились наверняка, что нужно выводить ключи или значения, поэтому и то, и то\r",
							"for(let key in respFin.person){\r",
							"    console.log(respFin.person[key])\r",
							"}\r",
							"\r",
							"for (let key2 in respFin.person){\r",
							"    console.log(key2)\r",
							"}\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": [{
				"person": {
					"u_age": 32,
					"u_name": [
						"olia",
						500,
						32
					],
					"u_salary_5_years": 2100.0
				},
				"qa_salary_after_1.5_year": 1650.0,
				"qa_salary_after_12_months": 1350.0,
				"qa_salary_after_3.5_years": 1900.0,
				"qa_salary_after_6_months": 1000,
				"start_qa_salary": 500
			}]
		}
	]
}